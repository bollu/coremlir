{- Core2MLIR: Dump BeforeCorePrep -}
module Main where

rec {
fib :: Int# -> Int#

{- Core Size{terms=21 types=4 cos=0 vbinds=0 jbinds=0} -}
fib =
  λ i →
    case i of ds {
      DEFAULT →
        case APP(Main.fib
               (APP(GHC.Prim.-# i 1#)))
        of wild {
          DEFAULT →
            APP((case APP(Main.fib i)
              of wild {
                DEFAULT →
                  APP(GHC.Prim.+# wild)
              })
              wild)
        }
      0# → i
      1# → i
    }
}
$trModule :: Module

{- Core Size{terms=5 types=0 cos=0 vbinds=0 jbinds=0} -}
$trModule =
  APP(GHC.Types.Module
    (APP(GHC.Types.TrNameS "main"#))
    (APP(GHC.Types.TrNameS
       "Main"#)))

main :: IO ()

{- Core Size{terms=7 types=3 cos=0 vbinds=0 jbinds=0} -}
main =
  case APP(Main.fib 10#) of x {
    DEFAULT →
      APP(GHC.Base.return
        @IO
        GHC.Base.$fMonadIO
        @()
        GHC.Tuple.())
  }

main :: IO ()

{- Core Size{terms=2 types=1 cos=0 vbinds=0 jbinds=0} -}
main =
  APP(GHC.TopHandler.runMainIO
    @() Main.main)

