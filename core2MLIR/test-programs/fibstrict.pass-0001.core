{- Core2MLIR: Dump AfterCorePrep -}
module Main where

rec {
sat :: Int# -> Int#

{- Core Size{terms=31 types=10 cos=0 vbinds=1 jbinds=0} -}
sat =
  λ i →
    case i of ds {
      DEFAULT →
        case APP(GHC.Prim.-# i 1#)
        of sat {
          DEFAULT →
            case APP(Main.fib sat) of wild {
              DEFAULT →
                case case APP(Main.fib i)
                of wild {
                  DEFAULT →
                    let 
                        
                        sat =
                          λ eta →
                            APP(GHC.Prim.+# wild eta)
                    in sat
                }
                of sat {
                  DEFAULT → APP(sat wild)
                }
            }
        }
      0# → i
      1# → i
    }

fib :: Int# -> Int#

{- Core Size{terms=1 types=0 cos=0 vbinds=0 jbinds=0} -}
fib = sat
}
sat :: TrName

{- Core Size{terms=2 types=0 cos=0 vbinds=0 jbinds=0} -}
sat =
  APP(GHC.Types.TrNameS "Main"#)

sat :: TrName

{- Core Size{terms=2 types=0 cos=0 vbinds=0 jbinds=0} -}
sat =
  APP(GHC.Types.TrNameS "main"#)

$trModule :: Module

{- Core Size{terms=3 types=0 cos=0 vbinds=0 jbinds=0} -}
$trModule =
  APP(GHC.Types.Module sat sat)

main :: IO ()

{- Core Size{terms=7 types=3 cos=0 vbinds=0 jbinds=0} -}
main =
  case APP(Main.fib 10#) of x {
    DEFAULT →
      APP(GHC.Base.return
        @IO
        GHC.Base.$fMonadIO
        @()
        GHC.Tuple.())
  }

main :: IO ()

{- Core Size{terms=2 types=1 cos=0 vbinds=0 jbinds=0} -}
main =
  APP(GHC.TopHandler.runMainIO
    @() Main.main)

